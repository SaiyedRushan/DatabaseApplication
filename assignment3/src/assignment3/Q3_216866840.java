// THE NAME 216866840_Q3.java was not allowed and hence the name Q3_216866840.java

package assignment3;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;


public class Q3_216866840 extends javax.swing.JFrame {

    public Q3_216866840() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        insertbutton = new javax.swing.JButton();
        viewtablesbutton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Hello! What would you like to do?");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 20, 330, 50));

        insertbutton.setText("Insert Record");
        insertbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(insertbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 90, 120, 70));

        viewtablesbutton.setText("View Tables");
        viewtablesbutton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewtablesbuttonActionPerformed(evt);
            }
        });
        getContentPane().add(viewtablesbutton, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 90, 120, 70));

        setSize(new java.awt.Dimension(420, 239));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    // MY CODE STARTS HERE ------------------------
    Connection con1;
    PreparedStatement prepstatement;
   
    private void insertbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertbuttonActionPerformed
       
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Q1_216866840().setVisible(true);
            }
        });
    }//GEN-LAST:event_insertbuttonActionPerformed

    private void viewtablesbuttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewtablesbuttonActionPerformed
        
         java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Q2_216866840().setVisible(true);
            }
        });
    }//GEN-LAST:event_viewtablesbuttonActionPerformed
   
    /*
     part a) display the count of each eventtype (conference, journal, book) grouped based on the calendar months
    */
    public void table1Update(javax.swing.JTable countByMonthsTable){
    try {
             
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            prepstatement = con1.prepareStatement("""
                                                  (select "Conference" as EventType, concat(monthname(date), ' ', year(date)) as 'Month', count(distinct eventname) as 'count'
                                                  from eventconference
                                                  group by year(`Date`),month(`Date`)
                                                  order by `Date` asc )
                                                  union
                                                  ( select "Journal" , concat(monthname(activitydate), ' ', year(activitydate)) , count(distinct eventname)
                                                  from activityhappens
                                                  where EventName LIKE '%Journal%' or EventName like '%journal%' or EventName like '%Special Issue%' or EventName like '%Magazine%'
                                                  group by year(activitydate),month(activitydate)
                                                  order by activitydate asc
                                                  )
                                                  union
                                                  ( select "Book" , concat(monthname(activitydate), ' ', year(activitydate)) , count(distinct eventname)
                                                  from activityhappens
                                                  where EventName LIKE '%Call for Book Chapters%' or EventName like '%Call for Chapters%' or eventname like '%call for chapters%'
                                                  group by year(activitydate),month(activitydate)
                                                  order by activitydate asc
                                                  );
                                                  """);
            ResultSet rs = prepstatement.executeQuery();
            
            DefaultTableModel Df = (DefaultTableModel) countByMonthsTable.getModel();
            Df.setRowCount(0);
            
            while(rs.next())
            {
                Object[] o;
                o = new Object[3];
                o[0]=(rs.getString("EventType"));
                o[1]=(rs.getString("Month"));
                o[2]=(rs.getInt("count"));
               
                Df.addRow(o);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    /*
     part b) display the earliest event ocurring from each event type.
    */
    public void table2Update(javax.swing.JTable latestEventTable){
    try {
             
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            prepstatement = con1.prepareStatement("""
                                                  ( select "Conference" as activitytype, eventname as "Latest Event", activitydate 
                                                  from activityhappens
                                                  where eventname like "%Conference%" or eventname like "%Symposium%" or eventname like "%Workshop%" or eventname like "%DCOSS%"
                                                  /* eventname like "%DCOSS%" has been hardcoded in the above line since the eventname didn't contain the words conference, symposium or workshop. This record was scraped by some other student */
                                                  order by activitydate asc
                                                  limit 1 )
                                                  union
                                                  ( select "Journal" as activitytype, eventname as "Latest Event", activitydate 
                                                  from activityhappens
                                                  where eventname like "%Journal%" or eventname like "%journal%" or EventName like '%Special Issue%' or EventName like '%Magazine%'
                                                  /*eventname like "%Magazine%" or EventName like "%Special Issue %" have been used here since the eventname I scraped didn't contain the word journal in the title */
                                                  order by activitydate asc
                                                  limit 1)
                                                  union
                                                  ( select "Book" as activitytype, eventname as "Latest Event", activitydate 
                                                  from activityhappens
                                                  where eventname like '%Call for Book Chapters%' or eventname like '%Call for Chapters%' or eventname like '%call for chapters%' 
                                                  order by activitydate asc
                                                  limit 1 );
                                                  """);
            ResultSet rs = prepstatement.executeQuery();            
            DefaultTableModel Df = (DefaultTableModel) latestEventTable.getModel();
            Df.setRowCount(0);
            
            while(rs.next())
            {
                Object[] o;
                o = new Object[3];
                o[0]=(rs.getString("activitytype"));
                o[1]=(rs.getString("Latest Event"));
                o[2]=(rs.getDate("activitydate"));
             
                Df.addRow(o);
            }
        } catch (ClassNotFoundException | SQLException ex) {
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
       
    public void InsertRecord(String EventName,String EventNameAct, String EventNameP, String EventNameR, String EventNameBook, 
            String EventNameJournal, String EventNameConference, String EventWebLink, String CFPText, String ActivityName, String ActivityDate,
            String City, String Country, String Date, String JournalName, String JournalPublisher, String BookPublisher,
            String ResearchTopicName, String ResearchTopicArea, String PeopleName, String PeopleAffilliation, String Role){
      
        try {
            
            int check = 0; //used for checking whether data is inserted in at least one table or not.
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if (!EventNameAct.isEmpty() && !ActivityName.isEmpty() && !ActivityDate.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into ActivityHappens values (?,?,?)");
                prepstatement.setString(1,EventNameAct);
                prepstatement.setString(2,ActivityName);
                prepstatement.setString(3,ActivityDate);
                prepstatement.executeUpdate();
                check=1;
            }  
           
            if (!ResearchTopicName.isEmpty() && !ResearchTopicArea.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into ResearchTopic values (?,?)");  
                prepstatement.setString(1,ResearchTopicName);
                prepstatement.setString(2,ResearchTopicArea);
                prepstatement.executeUpdate();
                check=1;
            }
            if (!EventNameR.isEmpty() &&!ResearchTopicName.isEmpty()) {
                prepstatement = con1.prepareStatement("Insert into Covers values (?,?)");  
                prepstatement.setString(1,EventNameR);
                prepstatement.setString(2,ResearchTopicName);
                prepstatement.executeUpdate();
                check=1;
            }
            if (!PeopleName.isEmpty() && !PeopleAffilliation.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into People values (?,?)");  
                prepstatement.setString(1,PeopleName);
                prepstatement.setString(2,PeopleAffilliation);
                prepstatement.executeUpdate();
                check=1;            
            }
            
            if (!EventNameP.isEmpty() && !PeopleName.isEmpty() && !Role.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into Organizes values (?,?,?)");  
                prepstatement.setString(1,EventNameP);
                prepstatement.setString(2,PeopleName);
                prepstatement.setString(3,Role);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check = 1;
            }
            
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   }

    public void TwoActInsertRecord(String EventName,String TwoActEventName, String EventNameBook, String EventNameJournal,
            String EventNameConference, String EventWebLink, String CFPText, String TwoActActivityName1, String TwoActActivityDate1,
            String TwoActActivityName2, String TwoActActivityDate2, String City, String Country, String Date, String JournalName, 
            String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if (!TwoActEventName.isEmpty() && !TwoActActivityName1.isEmpty() && !TwoActActivityDate1.isEmpty() && !TwoActActivityName2.isEmpty() && !TwoActActivityDate2.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into ActivityHappens values (?,?,?), (?,?,?)");
                prepstatement.setString(1,TwoActEventName);
                prepstatement.setString(2,TwoActActivityName1);
                prepstatement.setString(3,TwoActActivityDate1);
                prepstatement.setString(4,TwoActEventName);
                prepstatement.setString(5,TwoActActivityName2);
                prepstatement.setString(6,TwoActActivityDate2);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                JOptionPane.showMessageDialog(null,"Record Added");

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   }
    
    public void ThreeActInsertRecord(String EventName,String ThreeActEventName, String EventNameBook, String EventNameJournal,
            String EventNameConference, String EventWebLink, String CFPText, String ThreeActActivityName1, String ThreeActActivityDate1,
            String ThreeActActivityName2, String ThreeActActivityDate2, String ThreeActActivityName3, String ThreeActActivityDate3,
            String City, String Country, String Date, String JournalName, String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if (!ThreeActEventName.isEmpty() && !ThreeActActivityName1.isEmpty() && !ThreeActActivityDate1.isEmpty() && !ThreeActActivityName2.isEmpty() && !ThreeActActivityDate2.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into ActivityHappens values (?,?,?), (?,?,?), (?,?,?)");
                prepstatement.setString(1,ThreeActEventName);
                prepstatement.setString(2,ThreeActActivityName1);
                prepstatement.setString(3,ThreeActActivityDate1);
                prepstatement.setString(4,ThreeActEventName);
                prepstatement.setString(5,ThreeActActivityName2);
                prepstatement.setString(6,ThreeActActivityDate2);
                prepstatement.setString(7,ThreeActEventName);
                prepstatement.setString(8,ThreeActActivityName3);
                prepstatement.setString(9,ThreeActActivityDate3);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   } 
       
    public void TwoPeopleInsertRecord(String EventName,String TwoPeopleEventName, String EventNameBook, String EventNameJournal,
            String EventNameConference, String EventWebLink, String CFPText, String TwoPeoplePeopleName1, String TwoPeoplePeopleAffilliation1,
            String TwoPeopleRole1, String TwoPeoplePeopleName2, String TwoPeoplePeopleAffilliation2, String TwoPeopleRole2,
            String City, String Country, String Date, String JournalName, String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if (!TwoPeoplePeopleName1.isEmpty() && !TwoPeoplePeopleAffilliation1.isEmpty() && !TwoPeoplePeopleName2.isEmpty() && !TwoPeoplePeopleAffilliation2.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into People values (?,?), (?,?)");  
                prepstatement.setString(1,TwoPeoplePeopleName1);
                prepstatement.setString(2,TwoPeoplePeopleAffilliation1);
                prepstatement.setString(3,TwoPeoplePeopleName2);
                prepstatement.setString(4,TwoPeoplePeopleAffilliation2);
                prepstatement.executeUpdate();
                check=1;
            }
            if (!TwoPeopleEventName.isEmpty()&& !TwoPeoplePeopleName1.isEmpty() && !TwoPeoplePeopleName2.isEmpty() && !TwoPeopleRole1.isEmpty() && !TwoPeopleRole2.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into Organizes values (?,?,?), (?,?,?)");  
                prepstatement.setString(1,TwoPeopleEventName);
                prepstatement.setString(2,TwoPeoplePeopleName1);
                prepstatement.setString(3,TwoPeopleRole1);
                prepstatement.setString(4,TwoPeopleEventName);
                prepstatement.setString(5,TwoPeoplePeopleName2);
                prepstatement.setString(6,TwoPeopleRole2);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   }
   
    public void ThreePeopleInsertRecord(String EventName,String ThreePeopleEventName, String EventNameBook, String EventNameJournal, 
            String EventNameConference, String EventWebLink, String CFPText, String ThreePeoplePeopleName1, 
            String ThreePeoplePeopleAffilliation1, String ThreePeopleRole1, String ThreePeoplePeopleName2, String ThreePeoplePeopleAffilliation2,
            String ThreePeopleRole2, String ThreePeoplePeopleName3, String ThreePeoplePeopleAffilliation3, String ThreePeopleRole3, 
            String City, String Country, String Date, String JournalName, String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if (!ThreePeoplePeopleName1.isEmpty() && !ThreePeoplePeopleAffilliation1.isEmpty() && !ThreePeoplePeopleName2.isEmpty() && !ThreePeoplePeopleAffilliation2.isEmpty() && !ThreePeoplePeopleName3.isEmpty() && !ThreePeoplePeopleAffilliation3.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into People values (?,?), (?,?),(?,?)");  
                prepstatement.setString(1,ThreePeoplePeopleName1);
                prepstatement.setString(2,ThreePeoplePeopleAffilliation1);
                prepstatement.setString(3,ThreePeoplePeopleName2);
                prepstatement.setString(4,ThreePeoplePeopleAffilliation2);
                prepstatement.setString(5,ThreePeoplePeopleName2);
                prepstatement.setString(6,ThreePeoplePeopleAffilliation2);
                prepstatement.executeUpdate();
                check=1;
            }
            if (!ThreePeopleEventName.isEmpty()&& !ThreePeoplePeopleName1.isEmpty() && !ThreePeoplePeopleName2.isEmpty() && !ThreePeoplePeopleName3.isEmpty() && !ThreePeopleRole1.isEmpty() && !ThreePeopleRole2.isEmpty() && !ThreePeopleRole3.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into Organizes values (?,?,?), (?,?,?), (?,?,?)");  
                prepstatement.setString(1,ThreePeopleEventName);
                prepstatement.setString(2,ThreePeoplePeopleName1);
                prepstatement.setString(3,ThreePeopleRole1);
                prepstatement.setString(4,ThreePeopleEventName);
                prepstatement.setString(5,ThreePeoplePeopleName2);
                prepstatement.setString(6,ThreePeopleRole2);
                prepstatement.setString(7,ThreePeopleEventName);
                prepstatement.setString(8,ThreePeoplePeopleName3);
                prepstatement.setString(9,ThreePeopleRole3);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   }
    
    public void TwoTopicsInsertRecord(String EventName,String TwoTopicsEventName, String EventNameBook, String EventNameJournal,
            String EventNameConference, String EventWebLink, String CFPText, String TwoTopicsResearchTopicName1, String TwoTopicsResearchArea1,
            String TwoTopicsResearchTopicName2, String TwoTopicsResearchArea2, String City, String Country, String Date, String JournalName,
            String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
             if (!TwoTopicsResearchTopicName1.isEmpty() && !TwoTopicsResearchArea1.isEmpty() &&!TwoTopicsResearchTopicName2.isEmpty() && !TwoTopicsResearchArea2.isEmpty() ){
                prepstatement = con1.prepareStatement("Insert into ResearchTopic values (?,?),(?,?)");  
                prepstatement.setString(1,TwoTopicsResearchTopicName1);
                prepstatement.setString(2,TwoTopicsResearchArea1);
                prepstatement.setString(3,TwoTopicsResearchTopicName2);
                prepstatement.setString(4,TwoTopicsResearchArea2);
                prepstatement.executeUpdate();
                check=1;
            }
             
            if (!TwoTopicsEventName.isEmpty() && !TwoTopicsResearchTopicName1.isEmpty() && !TwoTopicsResearchTopicName2.isEmpty() ) {
                prepstatement = con1.prepareStatement("Insert into Covers values (?,?), (?,?)");  
                prepstatement.setString(1,TwoTopicsEventName);
                prepstatement.setString(2,TwoTopicsResearchTopicName1);
                prepstatement.setString(3,TwoTopicsEventName);
                prepstatement.setString(4,TwoTopicsResearchTopicName2);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   }
    
    public void ThreeTopicsInsertRecord(String EventName,String ThreeTopicsEventName, String EventNameBook, String EventNameJournal,
            String EventNameConference, String EventWebLink, String CFPText, String ThreeTopicsResearchTopicName1, 
            String ThreeTopicsResearchArea1, String ThreeTopicsResearchTopicName2, String ThreeTopicsResearchArea2,
            String ThreeTopicsResearchTopicName3, String ThreeTopicsResearchArea3, String City, String Country, String Date,
            String JournalName, String JournalPublisher, String BookPublisher){
      
        try {
      
            Class.forName("com.mysql.cj.jdbc.Driver");
            con1 = DriverManager.getConnection("jdbc:mysql://localhost:3306/3421a03","root","");
            int check=0;
            
            if(!EventName.isEmpty() && !EventWebLink.isEmpty() && !CFPText.isEmpty()){
                prepstatement = con1.prepareStatement("Insert into event values(?,?,?)");
                prepstatement.setString(1,EventName);
                prepstatement.setString(2,EventWebLink);
                prepstatement.setString(3,CFPText);
                prepstatement.executeUpdate();
                check=1;
            }
            
             if (!ThreeTopicsResearchTopicName1.isEmpty() && !ThreeTopicsResearchArea1.isEmpty() && !ThreeTopicsResearchTopicName2.isEmpty() && !ThreeTopicsResearchArea2.isEmpty()  && !ThreeTopicsResearchTopicName3.isEmpty() && !ThreeTopicsResearchArea3.isEmpty() ){
                prepstatement = con1.prepareStatement("Insert into ResearchTopic values (?,?),(?,?), (?,?)");  
                prepstatement.setString(1,ThreeTopicsResearchTopicName1);
                prepstatement.setString(2,ThreeTopicsResearchArea1);
                prepstatement.setString(3,ThreeTopicsResearchTopicName2);
                prepstatement.setString(4,ThreeTopicsResearchArea2);
                prepstatement.setString(5,ThreeTopicsResearchTopicName3);
                prepstatement.setString(6,ThreeTopicsResearchArea3);
                prepstatement.executeUpdate();
                check=1;
            }
             
            if (!ThreeTopicsEventName.isEmpty() && !ThreeTopicsResearchTopicName1.isEmpty() && !ThreeTopicsResearchTopicName2.isEmpty() && !ThreeTopicsResearchTopicName3.isEmpty()) {
                prepstatement = con1.prepareStatement("Insert into Covers values (?,?), (?,?), (?,?)");  
                prepstatement.setString(1,ThreeTopicsEventName);
                prepstatement.setString(2,ThreeTopicsResearchTopicName1);
                prepstatement.setString(3,ThreeTopicsEventName);
                prepstatement.setString(4,ThreeTopicsResearchTopicName2);
                prepstatement.setString(5,ThreeTopicsEventName);
                prepstatement.setString(6,ThreeTopicsResearchTopicName3);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameBook.isEmpty() && !BookPublisher.isEmpty() && City.isEmpty() && JournalName.isEmpty()){    // meaning book record is added
                prepstatement = con1.prepareStatement("Insert into EventBook values (?,?)");
                prepstatement.setString(1, EventNameBook);
                prepstatement.setString(2, BookPublisher);
                prepstatement.executeUpdate();
                check=1;
            }
            
            if(!EventNameJournal.isEmpty() && !JournalName.isEmpty() && !JournalPublisher.isEmpty() && City.isEmpty() && BookPublisher.isEmpty()){   //meaning journal record is added
                prepstatement = con1.prepareStatement("Insert into EventJournal values (?,?,?)");
                prepstatement.setString(1, EventNameJournal);
                prepstatement.setString(2, JournalName);
                prepstatement.setString(3, JournalPublisher);
                prepstatement.executeUpdate();
                check=1;

            }
            if(!EventNameConference.isEmpty() && !City.isEmpty() && !Country.isEmpty() && !Date.isEmpty() && JournalName.isEmpty() && BookPublisher.isEmpty()){               //meaning conference record is added
                prepstatement = con1.prepareStatement("Insert into EventConference values (?,?,?,?)");
                prepstatement.setString(1, EventNameConference);
                prepstatement.setString(2, City);
                prepstatement.setString(3, Country);
                prepstatement.setString(4, Date);
                prepstatement.executeUpdate();
                check=1;
            }
            if (check==1) JOptionPane.showMessageDialog(null,"Record Added");
            
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(null,"SQL Error, please close the application and start again!");
            Logger.getLogger(Q3_216866840.class.getName()).log(Level.SEVERE, null, ex);
        } catch (Exception ex){
            JOptionPane.showMessageDialog(null,"Records not entered correctly, please close and start again!");
        }
     
   } 
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Q3_216866840.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Q3_216866840.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Q3_216866840.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Q3_216866840.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Q3_216866840().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton insertbutton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JButton viewtablesbutton;
    // End of variables declaration//GEN-END:variables
}
